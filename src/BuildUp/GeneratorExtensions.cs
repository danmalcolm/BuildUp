using System;
using System.Linq;
using System.Linq.Expressions;
using BuildUp.Utility.Reflection;

namespace BuildUp
{
	public static class GeneratorExtensions
	{
		/// <summary>
		/// Creates a new generator that modifies the sequence of objects by invoking a function against each object generated by
		/// this generator
		/// </summary>
		/// <param name="generator"> </param>
		/// <param name="selector"></param>
		/// <returns></returns>
		public static IGenerator<TResult> Select<TObject, TResult>(this IGenerator<TObject> generator, Func<TObject, TResult> selector)
		{
			return Generator.FromSequence(() => generator.Build().Select(selector));
		}

		/// <summary>
		/// Creates a new generator that modifies each object generated by this generator by executing the specified action.
		/// Intended for actions that mutate the objects in-place
		/// </summary>
		/// <param name="generator"> </param>
		/// <param name="action"></param>
		/// <returns></returns>
		public static IGenerator<TObject> Select<TObject>(this IGenerator<TObject> generator, Action<TObject> action)
		{
			return generator.Select(x =>
			{
				action(x);
				return x;
			});
		}


		/// <summary>
		/// Creates a new generator that combines objects built by the current generator with those generated by another,
		/// and creates a new sequence from the result of invoking the specified function against each pair of objects. The size of the 
		/// resulting sequence will be limited to the length of the shortest sequence.
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <typeparam name="TChild"></typeparam>
		/// <typeparam name="TResult"></typeparam>
		/// <param name="generator"></param>
		/// <param name="generatorSelector"></param>
		/// <param name="resultSelector"></param>
		/// <returns></returns>
		public static IGenerator<TResult> SelectMany<TObject, TChild, TResult>(this IGenerator<TObject> generator, Func<IGenerator<TObject>, IGenerator<TChild>> generatorSelector, Func<TObject, TChild, TResult> resultSelector)
		{
			var other = generatorSelector(generator);
			return generator.Combine(other, resultSelector);
		}

		/// <summary>
		/// Creates a new generator that combines objects built by the current generator with those generated by another, then
		/// invokes the specified action on each pair of objects.
		/// </summary>
		/// <typeparam name="TResult"></typeparam>
		/// <typeparam name="TObject"> </typeparam>
		/// <param name="generator"> </param>
		/// <param name="childSequenceSelector"></param>
		/// <param name="modify"></param>
		/// <returns></returns>
		public static IGenerator<TObject> SelectMany<TObject,TResult>(this IGenerator<TObject> generator, Func<IGenerator<TObject>, IGenerator<TResult>> childSequenceSelector, Action<TObject, TResult> modify)
		{
			return generator.SelectMany(childSequenceSelector, (a, b) =>
			{
				modify(a, b);
				return a;
			});
		}

		/// <summary>
		/// Returns a new generator that takes each object generated by this generator and sets 
		/// the member specified by the expression to a given value
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <typeparam name="TMember"></typeparam>
		/// <param name="generator"></param>
		/// <param name="expression"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public static IGenerator<TObject> Set<TObject,TMember>(this IGenerator<TObject> generator, Expression<Func<TObject,TMember>> expression, TMember value)
		{
			var accessor = MemberAccessor.For(expression);
			Action<TObject> set = x => accessor.SetValue(x, value);
			return generator.Select(set);
		}

		/// <summary>
		/// Returns a new generator that takes each object generated by the current generator and sets 
		/// the member specified by the expression to a value supplied by a different generator
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <typeparam name="TMember"></typeparam>
		/// <param name="generator"></param>
		/// <param name="expression"></param>
		/// <param name="values"></param>
		/// <returns></returns>
		public static IGenerator<TObject> Set<TObject, TMember>(this IGenerator<TObject> generator, Expression<Func<TObject, TMember>> expression, IGenerator<TMember> values)
		{
			var accessor = MemberAccessor.For(expression);
			return generator.SelectMany(s => values, (@object, value) => accessor.SetValue(@object, value));
		}

		public static IGenerator<TResult> Combine<TObject, TOther, TResult>(this IGenerator<TObject> generator, IGenerator<TOther> other, Func<TObject,TOther,TResult> get)
		{
			return Generator.FromSequence(() => Enumerable.Zip(generator.Build(), other.Build(), get));
		}
	}
}