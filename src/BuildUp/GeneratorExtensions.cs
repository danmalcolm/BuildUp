using System;
using System.Linq.Expressions;
using BuildUp.Utility.Reflection;

namespace BuildUp
{
	public static class GeneratorExtensions
	{
		/// <summary>
		/// Returns a new generator that takes each object generated by this generator and sets 
		/// the member specified by the expression to a given value
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <typeparam name="TMember"></typeparam>
		/// <param name="generator"></param>
		/// <param name="expression"></param>
		/// <param name="value"></param>
		/// <returns></returns>
		public static IGenerator<TObject> Set<TObject,TMember>(this IGenerator<TObject> generator, Expression<Func<TObject,TMember>> expression, TMember value)
		{
			var accessor = MemberAccessor.For(expression);
			Action<TObject> set = x => accessor.SetValue(x, value);
			return generator.Select(set);
		}

		/// <summary>
		/// Returns a new generator that takes each object generated by the current generator and sets 
		/// the member specified by the expression to a value supplied by a different generator
		/// </summary>
		/// <typeparam name="TObject"></typeparam>
		/// <typeparam name="TMember"></typeparam>
		/// <param name="generator"></param>
		/// <param name="expression"></param>
		/// <param name="values"></param>
		/// <returns></returns>
		public static IGenerator<TObject> Set<TObject, TMember>(this IGenerator<TObject> generator, Expression<Func<TObject, TMember>> expression, IGenerator<TMember> values)
		{
			var accessor = MemberAccessor.For(expression);
			return generator.SelectMany(s => values, (@object, value) => accessor.SetValue(@object, value));
		}
	}
}