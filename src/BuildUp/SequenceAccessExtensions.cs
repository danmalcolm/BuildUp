using System;
using System.Collections.Generic;
using System.Linq;

namespace BuildUp
{
	/// <summary>
	/// Contains convenience extension methods for accessing the sequence of objects generated by a source
	/// </summary>
	public static class SequenceAccessExtensions
	{
		/// <summary>
		/// Shortcut method that returns the specified number of objects generated by the source, equivalent to source.Build().Take(...)
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="source"></param>
		/// <param name="count"></param>
		/// <returns></returns>
		public static IEnumerable<T> Take<T>(this ISource<T> source, int count)
		{
			return source.Build().Take(count);
		}

		/// <summary>
		/// Shortcut method that returns the first object generated by the source, equivalent to source.Build().First()
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="source"></param>
		/// <returns></returns>
		public static T First<T>(this ISource<T> source)
		{
			return source.Build().First();
		}

		/// <summary>
		/// Creates a new source that generates an infinite sequence, repeating the first object generated by the current source
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="source"></param>
		/// <returns></returns>
		public static ISource<T> Freeze<T>(this ISource<T> source)
		{
			bool first = true;
			T result = default(T);
			return source.Select(value =>
			{
				if(first)
				{
					result = value;
					first = false;
				}
				return result;
			});
		}	

		/// <summary>
		/// Stores the specified number of elements from the start of the current sequence and creates
		/// an infinite sequence that loops repeatedly over the stored items. 
		/// </summary>
		/// <typeparam name="T"></typeparam>
		/// <param name="source"></param>
		/// <param name="count"></param>
		/// <returns></returns>
		public static ISource<T> Loop<T>(this ISource<T> source, int count)
		{
			return source.ModifySequence(x => LoopInternal(x, count));
		}

		private static IEnumerable<object> LoopInternal(IEnumerable<object> sequence, int count)
		{
			var values = sequence.Take(count).ToArray();
			if(values.Length > 0)
			{
				int index = 0;
				while(true)
				{
					yield return values[index];
					index = index < values.Length - 1 ? index + 1 : 0;
				}
			}
		}
	}
}